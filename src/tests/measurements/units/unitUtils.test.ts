import Unit from '../../../measurements/units/units'
import { convertToPlural, getUnitShortForm } from '../../../measurements/units/unitUtils'

describe('unitUtils', () => {
  describe('convertToPlural', () => {
    it('should convert singular units to plural', () => {
      expect(convertToPlural(Unit.millisecond)).toBe('milliseconds')
      expect(convertToPlural(Unit.second)).toBe('seconds')
      expect(convertToPlural(Unit.minute)).toBe('minutes')
      expect(convertToPlural(Unit.hour)).toBe('hours')
      expect(convertToPlural(Unit.day)).toBe('days')
      expect(convertToPlural(Unit.week)).toBe('weeks')
      expect(convertToPlural(Unit.month)).toBe('months')
      expect(convertToPlural(Unit.year)).toBe('years')
      expect(convertToPlural(Unit.decade)).toBe('decades')
      expect(convertToPlural(Unit.millimeter)).toBe('millimeters')
      expect(convertToPlural(Unit.centimeter)).toBe('centimeters')
      expect(convertToPlural(Unit.meter)).toBe('meters')
      expect(convertToPlural(Unit.kilometer)).toBe('kilometers')
      expect(convertToPlural(Unit.mile)).toBe('miles')
      expect(convertToPlural(Unit.lightyear)).toBe('lightyears')
      expect(convertToPlural(Unit.gram)).toBe('grams')
      expect(convertToPlural(Unit.kilogram)).toBe('kilograms')
      expect(convertToPlural(Unit.tonne)).toBe('tons')
      expect(convertToPlural(Unit.liter)).toBe('liters')
      expect(convertToPlural(Unit.ounce)).toBe('ounces')
      expect(convertToPlural(Unit.pound)).toBe('pounds')
      expect(convertToPlural(Unit.acre)).toBe('acres')
      expect(convertToPlural(Unit.hectare)).toBe('hectares')
      expect(convertToPlural(Unit.barrel)).toBe('barrels')
      expect(convertToPlural(Unit.pint)).toBe('pints')
      expect(convertToPlural(Unit.quart)).toBe('quarts')
      expect(convertToPlural(Unit.gallon)).toBe('gallons')
      expect(convertToPlural(Unit.century)).toBe('centuries')
      expect(convertToPlural(Unit.millennium)).toBe('millennia')
      expect(convertToPlural(Unit.foot)).toBe('feet')
      expect(convertToPlural(Unit.inch)).toBe('inches')
    

      expect(convertToPlural(Unit.kelvin)).toBe(Unit.kelvin)
      expect(convertToPlural(Unit.degreesCelsius)).toBe(Unit.degreesCelsius)
      expect(convertToPlural(Unit.degreesFahrenheit)).toBe(Unit.degreesFahrenheit)
      expect(convertToPlural(Unit.squareMm)).toBe(Unit.squareMm)
      expect(convertToPlural(Unit.squareCm)).toBe(Unit.squareCm)
      expect(convertToPlural(Unit.squareMeter)).toBe(Unit.squareMeter)
      expect(convertToPlural(Unit.squareKm)).toBe(Unit.squareKm)
      expect(convertToPlural(Unit.squareFeet)).toBe(Unit.squareFeet)
      expect(convertToPlural(Unit.squareInch)).toBe(Unit.squareInch)
      expect(convertToPlural(Unit.squareYard)).toBe(Unit.squareYard)
      expect(convertToPlural(Unit.squareMile)).toBe(Unit.squareMile)
      expect(convertToPlural(Unit.cubicFeet)).toBe(Unit.cubicFeet)
      expect(convertToPlural(Unit.cmCube)).toBe(Unit.cmCube)
      expect(convertToPlural(Unit.meterCube)).toBe(Unit.meterCube)
    })

    it('should return the same unit with \'s\' appended if it does not match any case', () => {
      expect(convertToPlural('unknownUnit' as Unit)).toBe('unknownUnits')
    })
  })
  
  describe('getUnitShortForm', () => {
    it('should return the correct short form for known units', () => {
      expect(getUnitShortForm(Unit.millisecond)).toBe('ms')
      expect(getUnitShortForm(Unit.second)).toBe('s')
      expect(getUnitShortForm(Unit.minute)).toBe('min')
      expect(getUnitShortForm(Unit.hour)).toBe('h')
      expect(getUnitShortForm(Unit.tonne)).toBe('ton')
      expect(getUnitShortForm(Unit.kilogram)).toBe('kg')
      expect(getUnitShortForm(Unit.gram)).toBe('g')
      expect(getUnitShortForm(Unit.kilometer)).toBe('km')
      expect(getUnitShortForm(Unit.meter)).toBe('m')
      expect(getUnitShortForm(Unit.centimeter)).toBe('cm')
      expect(getUnitShortForm(Unit.millimeter)).toBe('mm')
      expect(getUnitShortForm(Unit.foot)).toBe('ft')
      expect(getUnitShortForm(Unit.inch)).toBe('in')
    })

    it('should return the same unit if no short form is defined', () => {
      expect(getUnitShortForm('unknownUnit' as Unit)).toBe('unknownUnit')
    })
  })
})